sentenize (lib/sentenize.py):

  sentenize is a instance of a class SentSegmenter, inherits from Segmenter

  split = SentSplitter(), inherits from Splitter (lib/sentenize.py)

  rule = RULES (lib/sentenize.py)

  post method:
    generator yielding stripped(?) chunks

SentSplitter (lib/sentenize):
  constructor():
    pattern = DELIMETER (?)
      DELIMITER = ([=:;]-?[)(]{1,3}|[\.\?!…;"„'»”’\)\]\}])
        DELIMETER = smiles or delimeters
        smiles = r'[=:;]-?[)(]{1,3}'  # :-) ;) =(((
        delimeters = ENDINGS + ';' + GENERIC_QUOTES + CLOSE_QUOTES + CLOSE_BRACKETS
          ENDINGS        = '.?!…'
          GENERIC_QUOTES = '"„\''
          CLOSE_QUOTES   = '»”’'
          CLOSE_BRACKETS = ')]}'
    window = 10 (?)
    re = re.compile(pattern, re.U) (compile rgx from pattern string, unicode mode rgx)

  (text):
    pattern match:
    o(isEmpty, strip)(text):
      nothing
    otherwise:
      matches = self.re.match(text)

      previous = 0
      iterate matches:
        start = match.start                     # start index of the delimiter
        stop = match.end                        # index of the next char after delimiter

        delimiter = match.group(1)              # delimiter string

        yield text[previous:start]               # string from next chunk start to delimiter

        most_left = max(0, start-self.window)   # from to the left of the delimiter
                                                # by window size or 0
        left = text[most_left:start]            # from most_left to start of the delimiter

        most_right = stop + self.window         # from right to the delimiter by window size
        right = text[stop:most_right]           # from after delimiter to most_right

        yield SentSplit(left, delimiter, right, buffer = None)

        previous = stop


sentenize(SenSegmenter -> Segmenter)() <- string
  Segmenter() <- string
    parts <- self.split() <- string
    chunks <- self.segment() <- parts
      self.segment():
        iterate splits:
          if self.join() # check rules on split chunk
            buffer = buffer + split.delimiter + right # cancel split
          else
            yield buffer + split.delimiter
            buffer = right
        yield buffer

// const delimiters = /([^.?!…;]*?[.?!…;])/gmu;
